// Mocks generated by Mockito 5.0.11 from annotations
// in places/test/features/places/data/repositories/google_place_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dio/src/dio.dart' as _i4;
import 'package:dio/src/interceptor.dart' as _i14;
import 'package:dio/src/options.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:places/core/network/network_manager.dart' as _i13;
import 'package:places/features/places/data/datasources/local/local_cache_datasource.dart'
    as _i11;
import 'package:places/features/places/data/datasources/local/models/photo.dart'
    as _i3;
import 'package:places/features/places/data/datasources/local/models/place.dart'
    as _i2;
import 'package:places/features/places/data/datasources/local/models/types.dart'
    as _i12;
import 'package:places/features/places/data/datasources/remote_api/remote_api_datasource.dart'
    as _i5;
import 'package:places/features/places/domain/entities/photo_entity.dart'
    as _i10;
import 'package:places/features/places/domain/entities/place_details_entity.dart'
    as _i9;
import 'package:places/features/places/domain/entities/place_entity.dart'
    as _i7;
import 'package:places/features/places/domain/entities/types.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakePlaceModel extends _i1.Fake implements _i2.PlaceModel {}

class _FakePhotoModel extends _i1.Fake implements _i3.PhotoModel {}

class _FakeDio extends _i1.Fake implements _i4.Dio {}

/// A class which mocks [RemoteApiDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteApiDataSource extends _i1.Mock
    implements _i5.RemoteApiDataSource {
  MockRemoteApiDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i7.PlaceEntity>> getGooglePlace(_i8.PlaceType? type) =>
      (super.noSuchMethod(Invocation.method(#getGooglePlace, [type]),
              returnValue:
                  Future<List<_i7.PlaceEntity>>.value(<_i7.PlaceEntity>[]))
          as _i6.Future<List<_i7.PlaceEntity>>);
  @override
  _i6.Future<_i9.PlaceDetailsEntity?> getGooglePlaceDetails(String? placeId) =>
      (super.noSuchMethod(Invocation.method(#getGooglePlaceDetails, [placeId]),
              returnValue: Future<_i9.PlaceDetailsEntity?>.value())
          as _i6.Future<_i9.PlaceDetailsEntity?>);
  @override
  _i6.Future<_i10.PhotoEntity?> getGooglePlacePhoto(
          {String? placeId,
          String? photoReference,
          String? maxWith,
          String? maxHeight}) =>
      (super.noSuchMethod(
              Invocation.method(#getGooglePlacePhoto, [], {
                #placeId: placeId,
                #photoReference: photoReference,
                #maxWith: maxWith,
                #maxHeight: maxHeight
              }),
              returnValue: Future<_i10.PhotoEntity?>.value())
          as _i6.Future<_i10.PhotoEntity?>);
}

/// A class which mocks [LocalCacheDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalCacheDataSource extends _i1.Mock
    implements _i11.LocalCacheDataSource {
  MockLocalCacheDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.PlaceModel>> getGooglePlaces(_i12.PlaceType? type) =>
      (super.noSuchMethod(Invocation.method(#getGooglePlaces, [type]),
              returnValue:
                  Future<List<_i2.PlaceModel>>.value(<_i2.PlaceModel>[]))
          as _i6.Future<List<_i2.PlaceModel>>);
  @override
  _i6.Future<_i2.PlaceModel> getPlaceById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getPlaceById, [id]),
              returnValue: Future<_i2.PlaceModel>.value(_FakePlaceModel()))
          as _i6.Future<_i2.PlaceModel>);
  @override
  _i6.Future<_i3.PhotoModel> getGooglePlacePhoto(
          {String? placeId,
          String? photoReference,
          String? maxWith,
          String? maxHeight}) =>
      (super.noSuchMethod(
              Invocation.method(#getGooglePlacePhoto, [], {
                #placeId: placeId,
                #photoReference: photoReference,
                #maxWith: maxWith,
                #maxHeight: maxHeight
              }),
              returnValue: Future<_i3.PhotoModel>.value(_FakePhotoModel()))
          as _i6.Future<_i3.PhotoModel>);
}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i13.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);
  @override
  set isConnected(bool? _isConnected) =>
      super.noSuchMethod(Invocation.setter(#isConnected, _isConnected),
          returnValueForMissingStub: null);
  @override
  String get token =>
      (super.noSuchMethod(Invocation.getter(#token), returnValue: '')
          as String);
  @override
  set token(String? _token) =>
      super.noSuchMethod(Invocation.setter(#token, _token),
          returnValueForMissingStub: null);
  @override
  _i4.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio())
          as _i4.Dio);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  void addInterceptor(_i14.Interceptor? interceptor) =>
      super.noSuchMethod(Invocation.method(#addInterceptor, [interceptor]),
          returnValueForMissingStub: null);
  @override
  void setBaseUrl(String? url) =>
      super.noSuchMethod(Invocation.method(#setBaseUrl, [url]),
          returnValueForMissingStub: null);
  @override
  void setNetworkConfig(_i15.BaseOptions? options) =>
      super.noSuchMethod(Invocation.method(#setNetworkConfig, [options]),
          returnValueForMissingStub: null);
}
